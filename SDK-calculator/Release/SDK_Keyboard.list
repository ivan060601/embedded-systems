
SDK_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001b98  08001b98  00011b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001bb0  08001bb0  00011bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001bb8  08001bb8  00011bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001bbc  08001bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000004c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200004cc  200004cc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001d6d  00000000  00000000  0002d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00007c62  00000000  00000000  0002edd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  00036a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  00037333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff21  00000000  00000000  00037bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efb9  00000000  00000000  00057b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c075e  00000000  00000000  00066acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012722b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000195c  00000000  00000000  00127280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b80 	.word	0x08001b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001b80 	.word	0x08001b80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b510      	push	{r4, lr}
 80004c2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x40>)
 80004c6:	7818      	ldrb	r0, [r3, #0]
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d0:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <HAL_InitTick+0x44>)
 80004d2:	6810      	ldr	r0, [r2, #0]
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 f89c 	bl	8000614 <HAL_SYSTICK_Config>
 80004dc:	b968      	cbnz	r0, 80004fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004de:	2c0f      	cmp	r4, #15
 80004e0:	d901      	bls.n	80004e6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
 80004e4:	e00a      	b.n	80004fc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e6:	2200      	movs	r2, #0
 80004e8:	4621      	mov	r1, r4
 80004ea:	f04f 30ff 	mov.w	r0, #4294967295
 80004ee:	f000 f85d 	bl	80005ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <HAL_InitTick+0x40>)
 80004f4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80004f6:	2000      	movs	r0, #0
 80004f8:	e000      	b.n	80004fc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80004fa:	2001      	movs	r0, #1
}
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000
 8000504:	20000008 	.word	0x20000008

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f82f 	bl	8000588 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f001 fa30 	bl	8001994 <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x10>)
 800053e:	6811      	ldr	r1, [r2, #0]
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_IncTick+0x14>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	440b      	add	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000430 	.word	0x20000430
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <HAL_GetTick+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000430 	.word	0x20000430

08000560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000560:	b538      	push	{r3, r4, r5, lr}
 8000562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000564:	f7ff fff6 	bl	8000554 <HAL_GetTick>
 8000568:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800056a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800056e:	d002      	beq.n	8000576 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <HAL_Delay+0x24>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000576:	f7ff ffed 	bl	8000554 <HAL_GetTick>
 800057a:	1b40      	subs	r0, r0, r5
 800057c:	42a0      	cmp	r0, r4
 800057e:	d3fa      	bcc.n	8000576 <HAL_Delay+0x16>
  {
  }
}
 8000580:	bd38      	pop	{r3, r4, r5, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800058a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	0200      	lsls	r0, r0, #8
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800059a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800059c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005a4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ac:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_NVIC_SetPriority+0x60>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b6:	f1c3 0407 	rsb	r4, r3, #7
 80005ba:	2c04      	cmp	r4, #4
 80005bc:	bf28      	it	cs
 80005be:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	1d1d      	adds	r5, r3, #4
 80005c2:	2d06      	cmp	r5, #6
 80005c4:	d918      	bls.n	80005f8 <HAL_NVIC_SetPriority+0x4c>
 80005c6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c8:	f04f 35ff 	mov.w	r5, #4294967295
 80005cc:	fa05 f404 	lsl.w	r4, r5, r4
 80005d0:	ea21 0104 	bic.w	r1, r1, r4
 80005d4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d6:	fa05 f303 	lsl.w	r3, r5, r3
 80005da:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005de:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005e0:	2800      	cmp	r0, #0
 80005e2:	db0b      	blt.n	80005fc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	0109      	lsls	r1, r1, #4
 80005e6:	b2c9      	uxtb	r1, r1
 80005e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005f0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005f4:	bc30      	pop	{r4, r5}
 80005f6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	2300      	movs	r3, #0
 80005fa:	e7e5      	b.n	80005c8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	f000 000f 	and.w	r0, r0, #15
 8000600:	0109      	lsls	r1, r1, #4
 8000602:	b2c9      	uxtb	r1, r1
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <HAL_NVIC_SetPriority+0x64>)
 8000606:	5419      	strb	r1, [r3, r0]
 8000608:	e7f4      	b.n	80005f4 <HAL_NVIC_SetPriority+0x48>
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	e000ed14 	.word	0xe000ed14

08000614 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000614:	3801      	subs	r0, #1
 8000616:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800061a:	d20a      	bcs.n	8000632 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_SYSTICK_Config+0x24>)
 800061e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <HAL_SYSTICK_Config+0x28>)
 8000622:	21f0      	movs	r1, #240	; 0xf0
 8000624:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	2000      	movs	r0, #0
 800062a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062c:	2207      	movs	r2, #7
 800062e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000630:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000632:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000e010 	.word	0xe000e010
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000640:	2300      	movs	r3, #0
 8000642:	2b0f      	cmp	r3, #15
 8000644:	f200 80dd 	bhi.w	8000802 <HAL_GPIO_Init+0x1c2>
{
 8000648:	b4f0      	push	{r4, r5, r6, r7}
 800064a:	b082      	sub	sp, #8
 800064c:	e05d      	b.n	800070a <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800064e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000650:	005f      	lsls	r7, r3, #1
 8000652:	2403      	movs	r4, #3
 8000654:	40bc      	lsls	r4, r7
 8000656:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800065a:	68cc      	ldr	r4, [r1, #12]
 800065c:	40bc      	lsls	r4, r7
 800065e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000660:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000662:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000664:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000668:	684c      	ldr	r4, [r1, #4]
 800066a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800066e:	409a      	lsls	r2, r3
 8000670:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000672:	6042      	str	r2, [r0, #4]
 8000674:	e057      	b.n	8000726 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000676:	08dc      	lsrs	r4, r3, #3
 8000678:	3408      	adds	r4, #8
 800067a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800067e:	f003 0207 	and.w	r2, r3, #7
 8000682:	0096      	lsls	r6, r2, #2
 8000684:	220f      	movs	r2, #15
 8000686:	40b2      	lsls	r2, r6
 8000688:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800068c:	690a      	ldr	r2, [r1, #16]
 800068e:	40b2      	lsls	r2, r6
 8000690:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000692:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000696:	e05a      	b.n	800074e <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000698:	2207      	movs	r2, #7
 800069a:	e000      	b.n	800069e <HAL_GPIO_Init+0x5e>
 800069c:	2200      	movs	r2, #0
 800069e:	40b2      	lsls	r2, r6
 80006a0:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006a2:	3402      	adds	r4, #2
 80006a4:	4e57      	ldr	r6, [pc, #348]	; (8000804 <HAL_GPIO_Init+0x1c4>)
 80006a6:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006aa:	4a57      	ldr	r2, [pc, #348]	; (8000808 <HAL_GPIO_Init+0x1c8>)
 80006ac:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80006ae:	43ea      	mvns	r2, r5
 80006b0:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b4:	684f      	ldr	r7, [r1, #4]
 80006b6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006ba:	d001      	beq.n	80006c0 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 80006bc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80006c0:	4c51      	ldr	r4, [pc, #324]	; (8000808 <HAL_GPIO_Init+0x1c8>)
 80006c2:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80006c4:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80006c6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ca:	684f      	ldr	r7, [r1, #4]
 80006cc:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006d0:	d001      	beq.n	80006d6 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 80006d2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80006d6:	4c4c      	ldr	r4, [pc, #304]	; (8000808 <HAL_GPIO_Init+0x1c8>)
 80006d8:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006da:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80006dc:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006e0:	684f      	ldr	r7, [r1, #4]
 80006e2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80006e6:	d001      	beq.n	80006ec <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80006e8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80006ec:	4c46      	ldr	r4, [pc, #280]	; (8000808 <HAL_GPIO_Init+0x1c8>)
 80006ee:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80006f0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80006f2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f4:	684e      	ldr	r6, [r1, #4]
 80006f6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80006fa:	d001      	beq.n	8000700 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80006fc:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000700:	4c41      	ldr	r4, [pc, #260]	; (8000808 <HAL_GPIO_Init+0x1c8>)
 8000702:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000704:	3301      	adds	r3, #1
 8000706:	2b0f      	cmp	r3, #15
 8000708:	d878      	bhi.n	80007fc <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 800070a:	2201      	movs	r2, #1
 800070c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800070e:	680c      	ldr	r4, [r1, #0]
 8000710:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000714:	ea32 0404 	bics.w	r4, r2, r4
 8000718:	d1f4      	bne.n	8000704 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800071a:	684c      	ldr	r4, [r1, #4]
 800071c:	f004 0403 	and.w	r4, r4, #3
 8000720:	3c01      	subs	r4, #1
 8000722:	2c01      	cmp	r4, #1
 8000724:	d993      	bls.n	800064e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000726:	684a      	ldr	r2, [r1, #4]
 8000728:	f002 0203 	and.w	r2, r2, #3
 800072c:	2a03      	cmp	r2, #3
 800072e:	d009      	beq.n	8000744 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8000730:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000732:	005e      	lsls	r6, r3, #1
 8000734:	2203      	movs	r2, #3
 8000736:	40b2      	lsls	r2, r6
 8000738:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800073c:	688a      	ldr	r2, [r1, #8]
 800073e:	40b2      	lsls	r2, r6
 8000740:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000742:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000744:	684a      	ldr	r2, [r1, #4]
 8000746:	f002 0203 	and.w	r2, r2, #3
 800074a:	2a02      	cmp	r2, #2
 800074c:	d093      	beq.n	8000676 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800074e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000750:	005e      	lsls	r6, r3, #1
 8000752:	2203      	movs	r2, #3
 8000754:	40b2      	lsls	r2, r6
 8000756:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800075a:	684a      	ldr	r2, [r1, #4]
 800075c:	f002 0203 	and.w	r2, r2, #3
 8000760:	40b2      	lsls	r2, r6
 8000762:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000764:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000766:	684a      	ldr	r2, [r1, #4]
 8000768:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800076c:	d0ca      	beq.n	8000704 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2200      	movs	r2, #0
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	4a26      	ldr	r2, [pc, #152]	; (800080c <HAL_GPIO_Init+0x1cc>)
 8000774:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000776:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800077a:	6454      	str	r4, [r2, #68]	; 0x44
 800077c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800077e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000786:	089c      	lsrs	r4, r3, #2
 8000788:	1ca6      	adds	r6, r4, #2
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <HAL_GPIO_Init+0x1c4>)
 800078c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000790:	f003 0203 	and.w	r2, r3, #3
 8000794:	0096      	lsls	r6, r2, #2
 8000796:	220f      	movs	r2, #15
 8000798:	40b2      	lsls	r2, r6
 800079a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <HAL_GPIO_Init+0x1d0>)
 80007a0:	4290      	cmp	r0, r2
 80007a2:	f43f af7b 	beq.w	800069c <HAL_GPIO_Init+0x5c>
 80007a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007aa:	4290      	cmp	r0, r2
 80007ac:	d01a      	beq.n	80007e4 <HAL_GPIO_Init+0x1a4>
 80007ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007b2:	4290      	cmp	r0, r2
 80007b4:	d018      	beq.n	80007e8 <HAL_GPIO_Init+0x1a8>
 80007b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007ba:	4290      	cmp	r0, r2
 80007bc:	d016      	beq.n	80007ec <HAL_GPIO_Init+0x1ac>
 80007be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007c2:	4290      	cmp	r0, r2
 80007c4:	d014      	beq.n	80007f0 <HAL_GPIO_Init+0x1b0>
 80007c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007ca:	4290      	cmp	r0, r2
 80007cc:	d012      	beq.n	80007f4 <HAL_GPIO_Init+0x1b4>
 80007ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007d2:	4290      	cmp	r0, r2
 80007d4:	d010      	beq.n	80007f8 <HAL_GPIO_Init+0x1b8>
 80007d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007da:	4290      	cmp	r0, r2
 80007dc:	f43f af5c 	beq.w	8000698 <HAL_GPIO_Init+0x58>
 80007e0:	2208      	movs	r2, #8
 80007e2:	e75c      	b.n	800069e <HAL_GPIO_Init+0x5e>
 80007e4:	2201      	movs	r2, #1
 80007e6:	e75a      	b.n	800069e <HAL_GPIO_Init+0x5e>
 80007e8:	2202      	movs	r2, #2
 80007ea:	e758      	b.n	800069e <HAL_GPIO_Init+0x5e>
 80007ec:	2203      	movs	r2, #3
 80007ee:	e756      	b.n	800069e <HAL_GPIO_Init+0x5e>
 80007f0:	2204      	movs	r2, #4
 80007f2:	e754      	b.n	800069e <HAL_GPIO_Init+0x5e>
 80007f4:	2205      	movs	r2, #5
 80007f6:	e752      	b.n	800069e <HAL_GPIO_Init+0x5e>
 80007f8:	2206      	movs	r2, #6
 80007fa:	e750      	b.n	800069e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80007fc:	b002      	add	sp, #8
 80007fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000800:	4770      	bx	lr
 8000802:	4770      	bx	lr
 8000804:	40013800 	.word	0x40013800
 8000808:	40013c00 	.word	0x40013c00
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000

08000814 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000814:	b10a      	cbz	r2, 800081a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000816:	6181      	str	r1, [r0, #24]
 8000818:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800081a:	0409      	lsls	r1, r1, #16
 800081c:	6181      	str	r1, [r0, #24]
  }
}
 800081e:	4770      	bx	lr

08000820 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000820:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000822:	ea01 0203 	and.w	r2, r1, r3
 8000826:	ea21 0103 	bic.w	r1, r1, r3
 800082a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800082e:	6181      	str	r1, [r0, #24]
}
 8000830:	4770      	bx	lr

08000832 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000832:	6803      	ldr	r3, [r0, #0]
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800083a:	d101      	bne.n	8000840 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800083c:	2000      	movs	r0, #0
}
 800083e:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000840:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000844:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000846:	2300      	movs	r3, #0
 8000848:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800084a:	2220      	movs	r2, #32
 800084c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000850:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000854:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000856:	f042 0204 	orr.w	r2, r2, #4
 800085a:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800085c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
 8000862:	4770      	bx	lr

08000864 <I2C_WaitOnFlagUntilTimeout>:
{
 8000864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000868:	4607      	mov	r7, r0
 800086a:	460d      	mov	r5, r1
 800086c:	4690      	mov	r8, r2
 800086e:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000870:	e022      	b.n	80008b8 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000872:	f7ff fe6f 	bl	8000554 <HAL_GetTick>
 8000876:	9b06      	ldr	r3, [sp, #24]
 8000878:	1ac0      	subs	r0, r0, r3
 800087a:	42b0      	cmp	r0, r6
 800087c:	d800      	bhi.n	8000880 <I2C_WaitOnFlagUntilTimeout+0x1c>
 800087e:	b9de      	cbnz	r6, 80008b8 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000884:	2220      	movs	r2, #32
 8000886:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800088a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800088e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000890:	f042 0220 	orr.w	r2, r2, #32
 8000894:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000896:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 800089a:	2001      	movs	r0, #1
 800089c:	e01a      	b.n	80008d4 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	699c      	ldr	r4, [r3, #24]
 80008a2:	ea25 0404 	bic.w	r4, r5, r4
 80008a6:	b2a4      	uxth	r4, r4
 80008a8:	fab4 f484 	clz	r4, r4
 80008ac:	0964      	lsrs	r4, r4, #5
 80008ae:	45a0      	cmp	r8, r4
 80008b0:	d10f      	bne.n	80008d2 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 80008b2:	f1b6 3fff 	cmp.w	r6, #4294967295
 80008b6:	d1dc      	bne.n	8000872 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008b8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d1ee      	bne.n	800089e <I2C_WaitOnFlagUntilTimeout+0x3a>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	695c      	ldr	r4, [r3, #20]
 80008c4:	ea25 0404 	bic.w	r4, r5, r4
 80008c8:	b2a4      	uxth	r4, r4
 80008ca:	fab4 f484 	clz	r4, r4
 80008ce:	0964      	lsrs	r4, r4, #5
 80008d0:	e7ed      	b.n	80008ae <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80008d2:	2000      	movs	r0, #0
}
 80008d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080008d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80008d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008dc:	4605      	mov	r5, r0
 80008de:	460e      	mov	r6, r1
 80008e0:	4617      	mov	r7, r2
 80008e2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80008e4:	e03d      	b.n	8000962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008ec:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008ee:	682b      	ldr	r3, [r5, #0]
 80008f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80008f4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80008fa:	2220      	movs	r2, #32
 80008fc:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000900:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000904:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000906:	f042 0204 	orr.w	r2, r2, #4
 800090a:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800090c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000910:	2001      	movs	r0, #1
 8000912:	e034      	b.n	800097e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000914:	f7ff fe1e 	bl	8000554 <HAL_GetTick>
 8000918:	eba0 0008 	sub.w	r0, r0, r8
 800091c:	42b8      	cmp	r0, r7
 800091e:	d800      	bhi.n	8000922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8000920:	b9ff      	cbnz	r7, 8000962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000922:	2300      	movs	r3, #0
 8000924:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000926:	2220      	movs	r2, #32
 8000928:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800092c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000930:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000932:	f042 0220 	orr.w	r2, r2, #32
 8000936:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000938:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 800093c:	2001      	movs	r0, #1
 800093e:	e01e      	b.n	800097e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	699c      	ldr	r4, [r3, #24]
 8000944:	ea26 0404 	bic.w	r4, r6, r4
 8000948:	b2a4      	uxth	r4, r4
 800094a:	3c00      	subs	r4, #0
 800094c:	bf18      	it	ne
 800094e:	2401      	movne	r4, #1
 8000950:	b1a4      	cbz	r4, 800097c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000952:	682b      	ldr	r3, [r5, #0]
 8000954:	695a      	ldr	r2, [r3, #20]
 8000956:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800095a:	d1c4      	bne.n	80008e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800095c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8000960:	d1d8      	bne.n	8000914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000962:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1ea      	bne.n	8000940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	695c      	ldr	r4, [r3, #20]
 800096e:	ea26 0404 	bic.w	r4, r6, r4
 8000972:	b2a4      	uxth	r4, r4
 8000974:	3c00      	subs	r4, #0
 8000976:	bf18      	it	ne
 8000978:	2401      	movne	r4, #1
 800097a:	e7e9      	b.n	8000950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800097c:	2000      	movs	r0, #0
}
 800097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000982 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000982:	b570      	push	{r4, r5, r6, lr}
 8000984:	4604      	mov	r4, r0
 8000986:	460d      	mov	r5, r1
 8000988:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000992:	d11c      	bne.n	80009ce <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000994:	4620      	mov	r0, r4
 8000996:	f7ff ff4c 	bl	8000832 <I2C_IsAcknowledgeFailed>
 800099a:	b9d0      	cbnz	r0, 80009d2 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800099c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80009a0:	d0f3      	beq.n	800098a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009a2:	f7ff fdd7 	bl	8000554 <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	42a8      	cmp	r0, r5
 80009aa:	d801      	bhi.n	80009b0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d1ec      	bne.n	800098a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80009b4:	2220      	movs	r2, #32
 80009b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009c0:	f042 0220 	orr.w	r2, r2, #32
 80009c4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80009c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
 80009cc:	e000      	b.n	80009d0 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80009ce:	2000      	movs	r0, #0
}
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80009d2:	2001      	movs	r0, #1
 80009d4:	e7fc      	b.n	80009d0 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

080009d8 <I2C_RequestMemoryWrite>:
{
 80009d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009dc:	b085      	sub	sp, #20
 80009de:	4604      	mov	r4, r0
 80009e0:	460d      	mov	r5, r1
 80009e2:	4691      	mov	r9, r2
 80009e4:	461f      	mov	r7, r3
 80009e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80009ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80009ec:	6803      	ldr	r3, [r0, #0]
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80009f4:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80009f6:	9600      	str	r6, [sp, #0]
 80009f8:	4643      	mov	r3, r8
 80009fa:	2200      	movs	r2, #0
 80009fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a00:	f7ff ff30 	bl	8000864 <I2C_WaitOnFlagUntilTimeout>
 8000a04:	b960      	cbnz	r0, 8000a20 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000a0c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a0e:	4633      	mov	r3, r6
 8000a10:	4642      	mov	r2, r8
 8000a12:	4926      	ldr	r1, [pc, #152]	; (8000aac <I2C_RequestMemoryWrite+0xd4>)
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff ff5f 	bl	80008d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a1a:	b168      	cbz	r0, 8000a38 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	e008      	b.n	8000a32 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a28:	d002      	beq.n	8000a30 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000a30:	2003      	movs	r0, #3
}
 8000a32:	b005      	add	sp, #20
 8000a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9303      	str	r3, [sp, #12]
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	9203      	str	r2, [sp, #12]
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a48:	4632      	mov	r2, r6
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f7ff ff98 	bl	8000982 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a52:	b930      	cbnz	r0, 8000a62 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000a54:	2f01      	cmp	r7, #1
 8000a56:	d10f      	bne.n	8000a78 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	fa5f f689 	uxtb.w	r6, r9
 8000a5e:	611e      	str	r6, [r3, #16]
 8000a60:	e7e7      	b.n	8000a32 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d001      	beq.n	8000a6c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8000a68:	2001      	movs	r0, #1
 8000a6a:	e7e2      	b.n	8000a32 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a6c:	6822      	ldr	r2, [r4, #0]
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	e7f7      	b.n	8000a68 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8000a7e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a80:	4632      	mov	r2, r6
 8000a82:	4641      	mov	r1, r8
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff ff7c 	bl	8000982 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a8a:	b920      	cbnz	r0, 8000a96 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	fa5f f689 	uxtb.w	r6, r9
 8000a92:	611e      	str	r6, [r3, #16]
 8000a94:	e7cd      	b.n	8000a32 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d001      	beq.n	8000aa0 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	e7c8      	b.n	8000a32 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000aa0:	6822      	ldr	r2, [r4, #0]
 8000aa2:	6813      	ldr	r3, [r2, #0]
 8000aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e7f7      	b.n	8000a9c <I2C_RequestMemoryWrite+0xc4>
 8000aac:	00010002 	.word	0x00010002

08000ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	460d      	mov	r5, r1
 8000ab6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f013 0f04 	tst.w	r3, #4
 8000ac0:	d11c      	bne.n	8000afc <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f7ff feb5 	bl	8000832 <I2C_IsAcknowledgeFailed>
 8000ac8:	b9d0      	cbnz	r0, 8000b00 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000aca:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000ace:	d0f3      	beq.n	8000ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ad0:	f7ff fd40 	bl	8000554 <HAL_GetTick>
 8000ad4:	1b80      	subs	r0, r0, r6
 8000ad6:	42a8      	cmp	r0, r5
 8000ad8:	d801      	bhi.n	8000ade <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d1ec      	bne.n	8000ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ae8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000aec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000aee:	f042 0220 	orr.w	r2, r2, #32
 8000af2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000af4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000af8:	2001      	movs	r0, #1
 8000afa:	e000      	b.n	8000afe <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
}
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000b00:	2001      	movs	r0, #1
 8000b02:	e7fc      	b.n	8000afe <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08000b04 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000b04:	2800      	cmp	r0, #0
 8000b06:	f000 80cc 	beq.w	8000ca2 <HAL_I2C_Init+0x19e>
{
 8000b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d077      	beq.n	8000c06 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b16:	2324      	movs	r3, #36	; 0x24
 8000b18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000b1c:	6822      	ldr	r2, [r4, #0]
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	f023 0301 	bic.w	r3, r3, #1
 8000b24:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b30:	6822      	ldr	r2, [r4, #0]
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b38:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b3a:	f000 fc75 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b3e:	6862      	ldr	r2, [r4, #4]
 8000b40:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <HAL_I2C_Init+0x1a8>)
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d864      	bhi.n	8000c10 <HAL_I2C_Init+0x10c>
 8000b46:	4b5a      	ldr	r3, [pc, #360]	; (8000cb0 <HAL_I2C_Init+0x1ac>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	bf8c      	ite	hi
 8000b4c:	2300      	movhi	r3, #0
 8000b4e:	2301      	movls	r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f040 80a8 	bne.w	8000ca6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8000b56:	4d57      	ldr	r5, [pc, #348]	; (8000cb4 <HAL_I2C_Init+0x1b0>)
 8000b58:	fba5 3500 	umull	r3, r5, r5, r0
 8000b5c:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b5e:	6826      	ldr	r6, [r4, #0]
 8000b60:	6871      	ldr	r1, [r6, #4]
 8000b62:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000b66:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8000b6a:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b6c:	6821      	ldr	r1, [r4, #0]
 8000b6e:	6a0b      	ldr	r3, [r1, #32]
 8000b70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b74:	6865      	ldr	r5, [r4, #4]
 8000b76:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <HAL_I2C_Init+0x1a8>)
 8000b78:	4295      	cmp	r5, r2
 8000b7a:	d84f      	bhi.n	8000c1c <HAL_I2C_Init+0x118>
 8000b7c:	1c7a      	adds	r2, r7, #1
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b82:	6825      	ldr	r5, [r4, #0]
 8000b84:	69e9      	ldr	r1, [r5, #28]
 8000b86:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000b8a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b8e:	6863      	ldr	r3, [r4, #4]
 8000b90:	4a46      	ldr	r2, [pc, #280]	; (8000cac <HAL_I2C_Init+0x1a8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d84c      	bhi.n	8000c30 <HAL_I2C_Init+0x12c>
 8000b96:	3801      	subs	r0, #1
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b9e:	3001      	adds	r0, #1
 8000ba0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ba4:	4218      	tst	r0, r3
 8000ba6:	d078      	beq.n	8000c9a <HAL_I2C_Init+0x196>
 8000ba8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000bac:	430b      	orrs	r3, r1
 8000bae:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000bb0:	6821      	ldr	r1, [r4, #0]
 8000bb2:	680b      	ldr	r3, [r1, #0]
 8000bb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000bb8:	69e2      	ldr	r2, [r4, #28]
 8000bba:	6a20      	ldr	r0, [r4, #32]
 8000bbc:	4302      	orrs	r2, r0
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000bc2:	6821      	ldr	r1, [r4, #0]
 8000bc4:	688b      	ldr	r3, [r1, #8]
 8000bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000bce:	6922      	ldr	r2, [r4, #16]
 8000bd0:	68e0      	ldr	r0, [r4, #12]
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000bd8:	6821      	ldr	r1, [r4, #0]
 8000bda:	68cb      	ldr	r3, [r1, #12]
 8000bdc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000be0:	6962      	ldr	r2, [r4, #20]
 8000be2:	69a0      	ldr	r0, [r4, #24]
 8000be4:	4302      	orrs	r2, r0
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bfe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c00:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8000c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000c06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c0a:	f000 fd69 	bl	80016e0 <HAL_I2C_MspInit>
 8000c0e:	e782      	b.n	8000b16 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <HAL_I2C_Init+0x1b4>)
 8000c12:	4298      	cmp	r0, r3
 8000c14:	bf8c      	ite	hi
 8000c16:	2300      	movhi	r3, #0
 8000c18:	2301      	movls	r3, #1
 8000c1a:	e799      	b.n	8000b50 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c20:	fb02 f207 	mul.w	r2, r2, r7
 8000c24:	4d25      	ldr	r5, [pc, #148]	; (8000cbc <HAL_I2C_Init+0x1b8>)
 8000c26:	fba5 5202 	umull	r5, r2, r5, r2
 8000c2a:	0992      	lsrs	r2, r2, #6
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	e7a6      	b.n	8000b7e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c30:	68a2      	ldr	r2, [r4, #8]
 8000c32:	b9ba      	cbnz	r2, 8000c64 <HAL_I2C_Init+0x160>
 8000c34:	1e46      	subs	r6, r0, #1
 8000c36:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8000c3a:	fbb6 f6f7 	udiv	r6, r6, r7
 8000c3e:	3601      	adds	r6, #1
 8000c40:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8000c44:	fab6 f686 	clz	r6, r6
 8000c48:	0976      	lsrs	r6, r6, #5
 8000c4a:	bb46      	cbnz	r6, 8000c9e <HAL_I2C_Init+0x19a>
 8000c4c:	b9c2      	cbnz	r2, 8000c80 <HAL_I2C_Init+0x17c>
 8000c4e:	1e42      	subs	r2, r0, #1
 8000c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c58:	3201      	adds	r2, #1
 8000c5a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000c5e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8000c62:	e7a3      	b.n	8000bac <HAL_I2C_Init+0xa8>
 8000c64:	1e46      	subs	r6, r0, #1
 8000c66:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8000c6a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000c6e:	fbb6 f6f7 	udiv	r6, r6, r7
 8000c72:	3601      	adds	r6, #1
 8000c74:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8000c78:	fab6 f686 	clz	r6, r6
 8000c7c:	0976      	lsrs	r6, r6, #5
 8000c7e:	e7e4      	b.n	8000c4a <HAL_I2C_Init+0x146>
 8000c80:	1e42      	subs	r2, r0, #1
 8000c82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c8e:	3201      	adds	r2, #1
 8000c90:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000c94:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8000c98:	e788      	b.n	8000bac <HAL_I2C_Init+0xa8>
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	e786      	b.n	8000bac <HAL_I2C_Init+0xa8>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e784      	b.n	8000bac <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8000ca2:	2001      	movs	r0, #1
}
 8000ca4:	4770      	bx	lr
    return HAL_ERROR;
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	e7ac      	b.n	8000c04 <HAL_I2C_Init+0x100>
 8000caa:	bf00      	nop
 8000cac:	000186a0 	.word	0x000186a0
 8000cb0:	001e847f 	.word	0x001e847f
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	003d08ff 	.word	0x003d08ff
 8000cbc:	10624dd3 	.word	0x10624dd3

08000cc0 <HAL_I2C_Mem_Write>:
{
 8000cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460f      	mov	r7, r1
 8000cca:	4690      	mov	r8, r2
 8000ccc:	4699      	mov	r9, r3
 8000cce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fc40 	bl	8000554 <HAL_GetTick>
 8000cd4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8000cda:	b2c0      	uxtb	r0, r0
 8000cdc:	2820      	cmp	r0, #32
 8000cde:	d003      	beq.n	8000ce8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8000ce0:	2002      	movs	r0, #2
}
 8000ce2:	b003      	add	sp, #12
 8000ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ce8:	9500      	str	r5, [sp, #0]
 8000cea:	2319      	movs	r3, #25
 8000cec:	2201      	movs	r2, #1
 8000cee:	494b      	ldr	r1, [pc, #300]	; (8000e1c <HAL_I2C_Mem_Write+0x15c>)
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff fdb7 	bl	8000864 <I2C_WaitOnFlagUntilTimeout>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	f040 8089 	bne.w	8000e0e <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8000cfc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	f000 8086 	beq.w	8000e12 <HAL_I2C_Mem_Write+0x152>
 8000d06:	2301      	movs	r3, #1
 8000d08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	f012 0f01 	tst.w	r2, #1
 8000d14:	d103      	bne.n	8000d1e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f042 0201 	orr.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	6813      	ldr	r3, [r2, #0]
 8000d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d26:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d28:	2321      	movs	r3, #33	; 0x21
 8000d2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d3a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000d3c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8000d40:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000d42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d44:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d46:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <HAL_I2C_Mem_Write+0x160>)
 8000d48:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000d4a:	9501      	str	r5, [sp, #4]
 8000d4c:	9600      	str	r6, [sp, #0]
 8000d4e:	464b      	mov	r3, r9
 8000d50:	4642      	mov	r2, r8
 8000d52:	4639      	mov	r1, r7
 8000d54:	4620      	mov	r0, r4
 8000d56:	f7ff fe3f 	bl	80009d8 <I2C_RequestMemoryWrite>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d15b      	bne.n	8000e16 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8000d5e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d035      	beq.n	8000dd0 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d64:	462a      	mov	r2, r5
 8000d66:	4631      	mov	r1, r6
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f7ff fe0a 	bl	8000982 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d6e:	bb20      	cbnz	r0, 8000dba <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000d70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8000d78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d7a:	1c4b      	adds	r3, r1, #1
 8000d7c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000d7e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000d80:	3a01      	subs	r2, #1
 8000d82:	b292      	uxth	r2, r2
 8000d84:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	6958      	ldr	r0, [r3, #20]
 8000d94:	f010 0f04 	tst.w	r0, #4
 8000d98:	d0e1      	beq.n	8000d5e <HAL_I2C_Mem_Write+0x9e>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d0df      	beq.n	8000d5e <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000d9e:	784a      	ldrb	r2, [r1, #1]
 8000da0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8000da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000da4:	3301      	adds	r3, #1
 8000da6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8000da8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000daa:	3b01      	subs	r3, #1
 8000dac:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000dae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3b01      	subs	r3, #1
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000db8:	e7d1      	b.n	8000d5e <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	e78e      	b.n	8000ce2 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dc4:	6822      	ldr	r2, [r4, #0]
 8000dc6:	6813      	ldr	r3, [r2, #0]
 8000dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e7f7      	b.n	8000dc0 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dd0:	462a      	mov	r2, r5
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff fe6b 	bl	8000ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 8000dda:	b150      	cbz	r0, 8000df2 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d001      	beq.n	8000de6 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8000de2:	2001      	movs	r0, #1
 8000de4:	e77d      	b.n	8000ce2 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000de6:	6822      	ldr	r2, [r4, #0]
 8000de8:	6813      	ldr	r3, [r2, #0]
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e7f7      	b.n	8000de2 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	6813      	ldr	r3, [r2, #0]
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000dfc:	2320      	movs	r3, #32
 8000dfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000e08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000e0c:	e769      	b.n	8000ce2 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8000e0e:	2002      	movs	r0, #2
 8000e10:	e767      	b.n	8000ce2 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8000e12:	2002      	movs	r0, #2
 8000e14:	e765      	b.n	8000ce2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8000e16:	2001      	movs	r0, #1
 8000e18:	e763      	b.n	8000ce2 <HAL_I2C_Mem_Write+0x22>
 8000e1a:	bf00      	nop
 8000e1c:	00100002 	.word	0x00100002
 8000e20:	ffff0000 	.word	0xffff0000

08000e24 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e24:	2800      	cmp	r0, #0
 8000e26:	f000 81df 	beq.w	80011e8 <HAL_RCC_OscConfig+0x3c4>
{
 8000e2a:	b570      	push	{r4, r5, r6, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e30:	6803      	ldr	r3, [r0, #0]
 8000e32:	f013 0f01 	tst.w	r3, #1
 8000e36:	d03b      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e38:	4ba6      	ldr	r3, [pc, #664]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d02c      	beq.n	8000e9e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e44:	4ba3      	ldr	r3, [pc, #652]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d021      	beq.n	8000e94 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e56:	d04f      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xd4>
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e5c:	d052      	beq.n	8000f04 <HAL_RCC_OscConfig+0xe0>
 8000e5e:	4b9d      	ldr	r3, [pc, #628]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e70:	6863      	ldr	r3, [r4, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d050      	beq.n	8000f18 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fb6d 	bl	8000554 <HAL_GetTick>
 8000e7a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7c:	4b95      	ldr	r3, [pc, #596]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e84:	d114      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e86:	f7ff fb65 	bl	8000554 <HAL_GetTick>
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	2864      	cmp	r0, #100	; 0x64
 8000e8e:	d9f5      	bls.n	8000e7c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000e90:	2003      	movs	r0, #3
 8000e92:	e1b0      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e94:	4b8f      	ldr	r3, [pc, #572]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e9c:	d0d8      	beq.n	8000e50 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9e:	4b8d      	ldr	r3, [pc, #564]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ea6:	d003      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x8c>
 8000ea8:	6863      	ldr	r3, [r4, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 819e 	beq.w	80011ec <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	f013 0f02 	tst.w	r3, #2
 8000eb6:	d054      	beq.n	8000f62 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000eb8:	4b86      	ldr	r3, [pc, #536]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f013 0f0c 	tst.w	r3, #12
 8000ec0:	d03e      	beq.n	8000f40 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ec2:	4b84      	ldr	r3, [pc, #528]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d033      	beq.n	8000f36 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ece:	68e3      	ldr	r3, [r4, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d067      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed4:	4b80      	ldr	r3, [pc, #512]	; (80010d8 <HAL_RCC_OscConfig+0x2b4>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eda:	f7ff fb3b 	bl	8000554 <HAL_GetTick>
 8000ede:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee0:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f013 0f02 	tst.w	r3, #2
 8000ee8:	d153      	bne.n	8000f92 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fb33 	bl	8000554 <HAL_GetTick>
 8000eee:	1b40      	subs	r0, r0, r5
 8000ef0:	2802      	cmp	r0, #2
 8000ef2:	d9f5      	bls.n	8000ee0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	e17e      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef8:	4a76      	ldr	r2, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e7b5      	b.n	8000e70 <HAL_RCC_OscConfig+0x4c>
 8000f04:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e7ab      	b.n	8000e70 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000f18:	f7ff fb1c 	bl	8000554 <HAL_GetTick>
 8000f1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f26:	d0c3      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fb14 	bl	8000554 <HAL_GetTick>
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	2864      	cmp	r0, #100	; 0x64
 8000f30:	d9f5      	bls.n	8000f1e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000f32:	2003      	movs	r0, #3
 8000f34:	e15f      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f3e:	d1c6      	bne.n	8000ece <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f013 0f02 	tst.w	r3, #2
 8000f48:	d003      	beq.n	8000f52 <HAL_RCC_OscConfig+0x12e>
 8000f4a:	68e3      	ldr	r3, [r4, #12]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 814f 	bne.w	80011f0 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000f54:	6813      	ldr	r3, [r2, #0]
 8000f56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f5a:	6921      	ldr	r1, [r4, #16]
 8000f5c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f60:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	f013 0f08 	tst.w	r3, #8
 8000f68:	d040      	beq.n	8000fec <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f6a:	6963      	ldr	r3, [r4, #20]
 8000f6c:	b363      	cbz	r3, 8000fc8 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6e:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <HAL_RCC_OscConfig+0x2b8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f74:	f7ff faee 	bl	8000554 <HAL_GetTick>
 8000f78:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f7e:	f013 0f02 	tst.w	r3, #2
 8000f82:	d133      	bne.n	8000fec <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f84:	f7ff fae6 	bl	8000554 <HAL_GetTick>
 8000f88:	1b40      	subs	r0, r0, r5
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d9f5      	bls.n	8000f7a <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8000f8e:	2003      	movs	r0, #3
 8000f90:	e131      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000f94:	6813      	ldr	r3, [r2, #0]
 8000f96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f9a:	6921      	ldr	r1, [r4, #16]
 8000f9c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e7de      	b.n	8000f62 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_RCC_OscConfig+0x2b4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000faa:	f7ff fad3 	bl	8000554 <HAL_GetTick>
 8000fae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f013 0f02 	tst.w	r3, #2
 8000fb8:	d0d3      	beq.n	8000f62 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff facb 	bl	8000554 <HAL_GetTick>
 8000fbe:	1b40      	subs	r0, r0, r5
 8000fc0:	2802      	cmp	r0, #2
 8000fc2:	d9f5      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	e116      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc8:	4b44      	ldr	r3, [pc, #272]	; (80010dc <HAL_RCC_OscConfig+0x2b8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fac1 	bl	8000554 <HAL_GetTick>
 8000fd2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fd8:	f013 0f02 	tst.w	r3, #2
 8000fdc:	d006      	beq.n	8000fec <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fab9 	bl	8000554 <HAL_GetTick>
 8000fe2:	1b40      	subs	r0, r0, r5
 8000fe4:	2802      	cmp	r0, #2
 8000fe6:	d9f5      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8000fe8:	2003      	movs	r0, #3
 8000fea:	e104      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f013 0f04 	tst.w	r3, #4
 8000ff2:	d078      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ffc:	d10d      	bne.n	800101a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8001004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001006:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001016:	2501      	movs	r5, #1
 8001018:	e000      	b.n	800101c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800101a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101c:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_RCC_OscConfig+0x2bc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001024:	d021      	beq.n	800106a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001026:	68a3      	ldr	r3, [r4, #8]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d032      	beq.n	8001092 <HAL_RCC_OscConfig+0x26e>
 800102c:	2b05      	cmp	r3, #5
 800102e:	d036      	beq.n	800109e <HAL_RCC_OscConfig+0x27a>
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8001032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001034:	f022 0201 	bic.w	r2, r2, #1
 8001038:	671a      	str	r2, [r3, #112]	; 0x70
 800103a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800103c:	f022 0204 	bic.w	r2, r2, #4
 8001040:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001042:	68a3      	ldr	r3, [r4, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d034      	beq.n	80010b2 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001048:	f7ff fa84 	bl	8000554 <HAL_GetTick>
 800104c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8001050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001052:	f013 0f02 	tst.w	r3, #2
 8001056:	d145      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001058:	f7ff fa7c 	bl	8000554 <HAL_GetTick>
 800105c:	1b80      	subs	r0, r0, r6
 800105e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001062:	4298      	cmp	r0, r3
 8001064:	d9f3      	bls.n	800104e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001066:	2003      	movs	r0, #3
 8001068:	e0c5      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800106a:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <HAL_RCC_OscConfig+0x2bc>)
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001074:	f7ff fa6e 	bl	8000554 <HAL_GetTick>
 8001078:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_RCC_OscConfig+0x2bc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001082:	d1d0      	bne.n	8001026 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001084:	f7ff fa66 	bl	8000554 <HAL_GetTick>
 8001088:	1b80      	subs	r0, r0, r6
 800108a:	2802      	cmp	r0, #2
 800108c:	d9f5      	bls.n	800107a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800108e:	2003      	movs	r0, #3
 8001090:	e0b1      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 8001094:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6713      	str	r3, [r2, #112]	; 0x70
 800109c:	e7d1      	b.n	8001042 <HAL_RCC_OscConfig+0x21e>
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 80010a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010a2:	f042 0204 	orr.w	r2, r2, #4
 80010a6:	671a      	str	r2, [r3, #112]	; 0x70
 80010a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	671a      	str	r2, [r3, #112]	; 0x70
 80010b0:	e7c7      	b.n	8001042 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fa4f 	bl	8000554 <HAL_GetTick>
 80010b6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_RCC_OscConfig+0x2b0>)
 80010ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010bc:	f013 0f02 	tst.w	r3, #2
 80010c0:	d010      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fa47 	bl	8000554 <HAL_GetTick>
 80010c6:	1b80      	subs	r0, r0, r6
 80010c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80010cc:	4298      	cmp	r0, r3
 80010ce:	d9f3      	bls.n	80010b8 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
 80010d2:	e090      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
 80010d4:	40023800 	.word	0x40023800
 80010d8:	42470000 	.word	0x42470000
 80010dc:	42470e80 	.word	0x42470e80
 80010e0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010e4:	b9ed      	cbnz	r5, 8001122 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e6:	69a3      	ldr	r3, [r4, #24]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8083 	beq.w	80011f4 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010ee:	4a49      	ldr	r2, [pc, #292]	; (8001214 <HAL_RCC_OscConfig+0x3f0>)
 80010f0:	6892      	ldr	r2, [r2, #8]
 80010f2:	f002 020c 	and.w	r2, r2, #12
 80010f6:	2a08      	cmp	r2, #8
 80010f8:	d051      	beq.n	800119e <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d017      	beq.n	800112e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <HAL_RCC_OscConfig+0x3f4>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fa26 	bl	8000554 <HAL_GetTick>
 8001108:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800110a:	4b42      	ldr	r3, [pc, #264]	; (8001214 <HAL_RCC_OscConfig+0x3f0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001112:	d042      	beq.n	800119a <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fa1e 	bl	8000554 <HAL_GetTick>
 8001118:	1b00      	subs	r0, r0, r4
 800111a:	2802      	cmp	r0, #2
 800111c:	d9f5      	bls.n	800110a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e069      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4a3c      	ldr	r2, [pc, #240]	; (8001214 <HAL_RCC_OscConfig+0x3f0>)
 8001124:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
 800112c:	e7db      	b.n	80010e6 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_RCC_OscConfig+0x3f4>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001134:	f7ff fa0e 	bl	8000554 <HAL_GetTick>
 8001138:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800113a:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_RCC_OscConfig+0x3f0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001142:	d006      	beq.n	8001152 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fa06 	bl	8000554 <HAL_GetTick>
 8001148:	1b40      	subs	r0, r0, r5
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f5      	bls.n	800113a <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
 8001150:	e051      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001152:	69e3      	ldr	r3, [r4, #28]
 8001154:	6a22      	ldr	r2, [r4, #32]
 8001156:	4313      	orrs	r3, r2
 8001158:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800115a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800115e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001160:	0852      	lsrs	r2, r2, #1
 8001162:	3a01      	subs	r2, #1
 8001164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800116a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800116e:	4a29      	ldr	r2, [pc, #164]	; (8001214 <HAL_RCC_OscConfig+0x3f0>)
 8001170:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <HAL_RCC_OscConfig+0x3f4>)
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001178:	f7ff f9ec 	bl	8000554 <HAL_GetTick>
 800117c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_RCC_OscConfig+0x3f0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff f9e4 	bl	8000554 <HAL_GetTick>
 800118c:	1b00      	subs	r0, r0, r4
 800118e:	2802      	cmp	r0, #2
 8001190:	d9f5      	bls.n	800117e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001192:	2003      	movs	r0, #3
 8001194:	e02f      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001196:	2000      	movs	r0, #0
 8001198:	e02d      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
 800119a:	2000      	movs	r0, #0
 800119c:	e02b      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d02b      	beq.n	80011fa <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_RCC_OscConfig+0x3f0>)
 80011a4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80011aa:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ac:	4291      	cmp	r1, r2
 80011ae:	d126      	bne.n	80011fe <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011b4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	428a      	cmp	r2, r1
 80011b8:	d123      	bne.n	8001202 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011bc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80011c0:	401a      	ands	r2, r3
 80011c2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80011c6:	d11e      	bne.n	8001206 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011c8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80011cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011ce:	0852      	lsrs	r2, r2, #1
 80011d0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011d2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80011d6:	d118      	bne.n	800120a <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011d8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80011dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011de:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80011e2:	d114      	bne.n	800120e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80011e4:	2000      	movs	r0, #0
 80011e6:	e006      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
}
 80011ea:	4770      	bx	lr
        return HAL_ERROR;
 80011ec:	2001      	movs	r0, #1
 80011ee:	e002      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 80011f4:	2000      	movs	r0, #0
}
 80011f6:	b002      	add	sp, #8
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e7fb      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
 8001200:	e7f9      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
 8001202:	2001      	movs	r0, #1
 8001204:	e7f7      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
 8001206:	2001      	movs	r0, #1
 8001208:	e7f5      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
 800120a:	2001      	movs	r0, #1
 800120c:	e7f3      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
 800120e:	2001      	movs	r0, #1
 8001210:	e7f1      	b.n	80011f6 <HAL_RCC_OscConfig+0x3d2>
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	42470060 	.word	0x42470060

0800121c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d03d      	beq.n	80012a6 <HAL_RCC_GetSysClockFreq+0x8a>
 800122a:	2b08      	cmp	r3, #8
 800122c:	d13d      	bne.n	80012aa <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800123c:	d012      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001246:	2300      	movs	r3, #0
 8001248:	481a      	ldr	r0, [pc, #104]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800124a:	fba1 0100 	umull	r0, r1, r1, r0
 800124e:	f7fe ffbb 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800125a:	3301      	adds	r3, #1
 800125c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800125e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001262:	e023      	b.n	80012ac <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800126c:	015c      	lsls	r4, r3, #5
 800126e:	2500      	movs	r5, #0
 8001270:	1ae4      	subs	r4, r4, r3
 8001272:	f165 0500 	sbc.w	r5, r5, #0
 8001276:	01ae      	lsls	r6, r5, #6
 8001278:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 800127c:	01a7      	lsls	r7, r4, #6
 800127e:	1b38      	subs	r0, r7, r4
 8001280:	eb66 0105 	sbc.w	r1, r6, r5
 8001284:	00cc      	lsls	r4, r1, #3
 8001286:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800128a:	00c5      	lsls	r5, r0, #3
 800128c:	18e8      	adds	r0, r5, r3
 800128e:	f144 0100 	adc.w	r1, r4, #0
 8001292:	028b      	lsls	r3, r1, #10
 8001294:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001298:	0284      	lsls	r4, r0, #10
 800129a:	4620      	mov	r0, r4
 800129c:	4619      	mov	r1, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	f7fe ff92 	bl	80001c8 <__aeabi_uldivmod>
 80012a4:	e7d5      	b.n	8001252 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x98>)
 80012a8:	e000      	b.n	80012ac <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	017d7840 	.word	0x017d7840
 80012b8:	00f42400 	.word	0x00f42400

080012bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80012bc:	2800      	cmp	r0, #0
 80012be:	f000 809b 	beq.w	80013f8 <HAL_RCC_ClockConfig+0x13c>
{
 80012c2:	b570      	push	{r4, r5, r6, lr}
 80012c4:	460d      	mov	r5, r1
 80012c6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_RCC_ClockConfig+0x14c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d208      	bcs.n	80012e6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d4:	b2cb      	uxtb	r3, r1
 80012d6:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_RCC_ClockConfig+0x14c>)
 80012d8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	428b      	cmp	r3, r1
 80012e2:	f040 808b 	bne.w	80013fc <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	f013 0f02 	tst.w	r3, #2
 80012ec:	d017      	beq.n	800131e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ee:	f013 0f04 	tst.w	r3, #4
 80012f2:	d004      	beq.n	80012fe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4a45      	ldr	r2, [pc, #276]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 80012f6:	6893      	ldr	r3, [r2, #8]
 80012f8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012fc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	f013 0f08 	tst.w	r3, #8
 8001304:	d004      	beq.n	8001310 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001306:	4a41      	ldr	r2, [pc, #260]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 8001308:	6893      	ldr	r3, [r2, #8]
 800130a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800130e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001310:	4a3e      	ldr	r2, [pc, #248]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 8001312:	6893      	ldr	r3, [r2, #8]
 8001314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001318:	68a1      	ldr	r1, [r4, #8]
 800131a:	430b      	orrs	r3, r1
 800131c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	f013 0f01 	tst.w	r3, #1
 8001324:	d032      	beq.n	800138c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d021      	beq.n	8001370 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132c:	1e9a      	subs	r2, r3, #2
 800132e:	2a01      	cmp	r2, #1
 8001330:	d925      	bls.n	800137e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	4a36      	ldr	r2, [pc, #216]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	f012 0f02 	tst.w	r2, #2
 800133a:	d061      	beq.n	8001400 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133c:	4933      	ldr	r1, [pc, #204]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 800133e:	688a      	ldr	r2, [r1, #8]
 8001340:	f022 0203 	bic.w	r2, r2, #3
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001348:	f7ff f904 	bl	8000554 <HAL_GetTick>
 800134c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	6862      	ldr	r2, [r4, #4]
 8001358:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800135c:	d016      	beq.n	800138c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135e:	f7ff f8f9 	bl	8000554 <HAL_GetTick>
 8001362:	1b80      	subs	r0, r0, r6
 8001364:	f241 3388 	movw	r3, #5000	; 0x1388
 8001368:	4298      	cmp	r0, r3
 800136a:	d9f0      	bls.n	800134e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800136c:	2003      	movs	r0, #3
 800136e:	e042      	b.n	80013f6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001378:	d1e0      	bne.n	800133c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e03b      	b.n	80013f6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4a23      	ldr	r2, [pc, #140]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001386:	d1d9      	bne.n	800133c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001388:	2001      	movs	r0, #1
 800138a:	e034      	b.n	80013f6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_ClockConfig+0x14c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	42ab      	cmp	r3, r5
 8001396:	d907      	bls.n	80013a8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001398:	b2ea      	uxtb	r2, r5
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_RCC_ClockConfig+0x14c>)
 800139c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	42ab      	cmp	r3, r5
 80013a6:	d12d      	bne.n	8001404 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f013 0f04 	tst.w	r3, #4
 80013ae:	d006      	beq.n	80013be <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4a16      	ldr	r2, [pc, #88]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 80013b2:	6893      	ldr	r3, [r2, #8]
 80013b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013b8:	68e1      	ldr	r1, [r4, #12]
 80013ba:	430b      	orrs	r3, r1
 80013bc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	f013 0f08 	tst.w	r3, #8
 80013c4:	d007      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 80013c8:	6893      	ldr	r3, [r2, #8]
 80013ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013ce:	6921      	ldr	r1, [r4, #16]
 80013d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013d6:	f7ff ff21 	bl	800121c <HAL_RCC_GetSysClockFreq>
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCC_ClockConfig+0x150>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_RCC_ClockConfig+0x154>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	40d8      	lsrs	r0, r3
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_RCC_ClockConfig+0x158>)
 80013ea:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x15c>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	f7ff f866 	bl	80004c0 <HAL_InitTick>
  return HAL_OK;
 80013f4:	2000      	movs	r0, #0
}
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
}
 80013fa:	4770      	bx	lr
      return HAL_ERROR;
 80013fc:	2001      	movs	r0, #1
 80013fe:	e7fa      	b.n	80013f6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001400:	2001      	movs	r0, #1
 8001402:	e7f8      	b.n	80013f6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001404:	2001      	movs	r0, #1
 8001406:	e7f6      	b.n	80013f6 <HAL_RCC_ClockConfig+0x13a>
 8001408:	40023c00 	.word	0x40023c00
 800140c:	40023800 	.word	0x40023800
 8001410:	08001b98 	.word	0x08001b98
 8001414:	20000008 	.word	0x20000008
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <HAL_RCC_GetHCLKFreq+0x8>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001428:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800142a:	f7ff fff7 	bl	800141c <HAL_RCC_GetHCLKFreq>
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001436:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
}
 800143a:	40d8      	lsrs	r0, r3
 800143c:	bd08      	pop	{r3, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	08001ba8 	.word	0x08001ba8

08001448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001448:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800144a:	f7ff ffe7 	bl	800141c <HAL_RCC_GetHCLKFreq>
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001456:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
}
 800145a:	40d8      	lsrs	r0, r3
 800145c:	bd08      	pop	{r3, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	08001ba8 	.word	0x08001ba8

08001468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800146c:	6802      	ldr	r2, [r0, #0]
 800146e:	6913      	ldr	r3, [r2, #16]
 8001470:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001474:	68c1      	ldr	r1, [r0, #12]
 8001476:	430b      	orrs	r3, r1
 8001478:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800147a:	6883      	ldr	r3, [r0, #8]
 800147c:	6902      	ldr	r2, [r0, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	6942      	ldr	r2, [r0, #20]
 8001482:	4313      	orrs	r3, r2
 8001484:	69c2      	ldr	r2, [r0, #28]
 8001486:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001488:	6801      	ldr	r1, [r0, #0]
 800148a:	68cb      	ldr	r3, [r1, #12]
 800148c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001490:	f023 030c 	bic.w	r3, r3, #12
 8001494:	4313      	orrs	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	6953      	ldr	r3, [r2, #20]
 800149c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014a0:	6981      	ldr	r1, [r0, #24]
 80014a2:	430b      	orrs	r3, r1
 80014a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014a6:	6803      	ldr	r3, [r0, #0]
 80014a8:	4a34      	ldr	r2, [pc, #208]	; (800157c <UART_SetConfig+0x114>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d006      	beq.n	80014bc <UART_SetConfig+0x54>
 80014ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d002      	beq.n	80014bc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80014b6:	f7ff ffb7 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 80014ba:	e001      	b.n	80014c0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80014bc:	f7ff ffc4 	bl	8001448 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014c0:	69e3      	ldr	r3, [r4, #28]
 80014c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c6:	d02a      	beq.n	800151e <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014c8:	2600      	movs	r6, #0
 80014ca:	1805      	adds	r5, r0, r0
 80014cc:	eb46 0106 	adc.w	r1, r6, r6
 80014d0:	182d      	adds	r5, r5, r0
 80014d2:	eb46 0101 	adc.w	r1, r6, r1
 80014d6:	00cb      	lsls	r3, r1, #3
 80014d8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80014dc:	00ea      	lsls	r2, r5, #3
 80014de:	4615      	mov	r5, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	6863      	ldr	r3, [r4, #4]
 80014e4:	009a      	lsls	r2, r3, #2
 80014e6:	0f9b      	lsrs	r3, r3, #30
 80014e8:	1828      	adds	r0, r5, r0
 80014ea:	eb46 0101 	adc.w	r1, r6, r1
 80014ee:	f7fe fe6b 	bl	80001c8 <__aeabi_uldivmod>
 80014f2:	4d23      	ldr	r5, [pc, #140]	; (8001580 <UART_SetConfig+0x118>)
 80014f4:	fba5 3200 	umull	r3, r2, r5, r0
 80014f8:	0951      	lsrs	r1, r2, #5
 80014fa:	2364      	movs	r3, #100	; 0x64
 80014fc:	fb03 0311 	mls	r3, r3, r1, r0
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	3332      	adds	r3, #50	; 0x32
 8001504:	fba5 2303 	umull	r2, r3, r5, r3
 8001508:	095b      	lsrs	r3, r3, #5
 800150a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800150e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	6821      	ldr	r1, [r4, #0]
 8001518:	4413      	add	r3, r2
 800151a:	608b      	str	r3, [r1, #8]
  }
}
 800151c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800151e:	2600      	movs	r6, #0
 8001520:	1805      	adds	r5, r0, r0
 8001522:	eb46 0106 	adc.w	r1, r6, r6
 8001526:	182d      	adds	r5, r5, r0
 8001528:	eb46 0101 	adc.w	r1, r6, r1
 800152c:	00cb      	lsls	r3, r1, #3
 800152e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001532:	00ea      	lsls	r2, r5, #3
 8001534:	4615      	mov	r5, r2
 8001536:	4619      	mov	r1, r3
 8001538:	6862      	ldr	r2, [r4, #4]
 800153a:	4633      	mov	r3, r6
 800153c:	1892      	adds	r2, r2, r2
 800153e:	eb46 0303 	adc.w	r3, r6, r3
 8001542:	1828      	adds	r0, r5, r0
 8001544:	eb46 0101 	adc.w	r1, r6, r1
 8001548:	f7fe fe3e 	bl	80001c8 <__aeabi_uldivmod>
 800154c:	4d0c      	ldr	r5, [pc, #48]	; (8001580 <UART_SetConfig+0x118>)
 800154e:	fba5 3200 	umull	r3, r2, r5, r0
 8001552:	0951      	lsrs	r1, r2, #5
 8001554:	2364      	movs	r3, #100	; 0x64
 8001556:	fb03 0311 	mls	r3, r3, r1, r0
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	3332      	adds	r3, #50	; 0x32
 800155e:	fba5 2303 	umull	r2, r3, r5, r3
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	005a      	lsls	r2, r3, #1
 8001566:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800156a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	6821      	ldr	r1, [r4, #0]
 8001574:	4413      	add	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
 8001578:	e7d0      	b.n	800151c <UART_SetConfig+0xb4>
 800157a:	bf00      	nop
 800157c:	40011000 	.word	0x40011000
 8001580:	51eb851f 	.word	0x51eb851f

08001584 <HAL_UART_Init>:
  if (huart == NULL)
 8001584:	b358      	cbz	r0, 80015de <HAL_UART_Init+0x5a>
{
 8001586:	b510      	push	{r4, lr}
 8001588:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800158a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800158e:	b30b      	cbz	r3, 80015d4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001590:	2324      	movs	r3, #36	; 0x24
 8001592:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	68d3      	ldr	r3, [r2, #12]
 800159a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800159e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff ff61 	bl	8001468 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	6913      	ldr	r3, [r2, #16]
 80015aa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80015ae:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	6953      	ldr	r3, [r2, #20]
 80015b4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80015b8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	68d3      	ldr	r3, [r2, #12]
 80015be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c4:	2000      	movs	r0, #0
 80015c6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015c8:	2320      	movs	r3, #32
 80015ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80015d2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80015d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80015d8:	f000 fa44 	bl	8001a64 <HAL_UART_MspInit>
 80015dc:	e7d8      	b.n	8001590 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80015de:	2001      	movs	r0, #1
}
 80015e0:	4770      	bx	lr
	...

080015e4 <MX_GPIO_Init>:
        * EXTI
     PD13   ------> S_TIM4_CH2
     PD14   ------> S_TIM4_CH3
*/
void MX_GPIO_Init(void)
{
 80015e4:	b530      	push	{r4, r5, lr}
 80015e6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	2400      	movs	r4, #0
 80015ea:	9405      	str	r4, [sp, #20]
 80015ec:	9406      	str	r4, [sp, #24]
 80015ee:	9407      	str	r4, [sp, #28]
 80015f0:	9408      	str	r4, [sp, #32]
 80015f2:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f4:	9400      	str	r4, [sp, #0]
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <MX_GPIO_Init+0xb8>)
 80015f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001602:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	9401      	str	r4, [sp, #4]
 800160c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800160e:	f042 0208 	orr.w	r2, r2, #8
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
 8001614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001616:	f002 0208 	and.w	r2, r2, #8
 800161a:	9201      	str	r2, [sp, #4]
 800161c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	9402      	str	r4, [sp, #8]
 8001620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001622:	f042 0204 	orr.w	r2, r2, #4
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
 8001628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162a:	f002 0204 	and.w	r2, r2, #4
 800162e:	9202      	str	r2, [sp, #8]
 8001630:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	9403      	str	r4, [sp, #12]
 8001634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
 800163c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163e:	f002 0201 	and.w	r2, r2, #1
 8001642:	9203      	str	r2, [sp, #12]
 8001644:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	9404      	str	r4, [sp, #16]
 8001648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800164a:	f042 0202 	orr.w	r2, r2, #2
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	9304      	str	r3, [sp, #16]
 8001658:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800165a:	4d11      	ldr	r5, [pc, #68]	; (80016a0 <MX_GPIO_Init+0xbc>)
 800165c:	4622      	mov	r2, r4
 800165e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001662:	4628      	mov	r0, r5
 8001664:	f7ff f8d6 	bl	8000814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001668:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800166c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001676:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	a905      	add	r1, sp, #20
 800167a:	4628      	mov	r0, r5
 800167c:	f7fe ffe0 	bl	8000640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001684:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168e:	a905      	add	r1, sp, #20
 8001690:	4628      	mov	r0, r5
 8001692:	f7fe ffd5 	bl	8000640 <HAL_GPIO_Init>

}
 8001696:	b00b      	add	sp, #44	; 0x2c
 8001698:	bd30      	pop	{r4, r5, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020c00 	.word	0x40020c00

080016a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016a4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <MX_I2C1_Init+0x30>)
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_I2C1_Init+0x34>)
 80016aa:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_I2C1_Init+0x38>)
 80016ae:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b0:	2300      	movs	r3, #0
 80016b2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016b4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016be:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c4:	f7ff fa1e 	bl	8000b04 <HAL_I2C_Init>
 80016c8:	b900      	cbnz	r0, 80016cc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ca:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016cc:	f000 f8a8 	bl	8001820 <Error_Handler>
}
 80016d0:	e7fb      	b.n	80016ca <MX_I2C1_Init+0x26>
 80016d2:	bf00      	nop
 80016d4:	20000434 	.word	0x20000434
 80016d8:	40005400 	.word	0x40005400
 80016dc:	000186a0 	.word	0x000186a0

080016e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016e0:	b530      	push	{r4, r5, lr}
 80016e2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	2300      	movs	r3, #0
 80016e6:	9303      	str	r3, [sp, #12]
 80016e8:	9304      	str	r3, [sp, #16]
 80016ea:	9305      	str	r3, [sp, #20]
 80016ec:	9306      	str	r3, [sp, #24]
 80016ee:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80016f0:	6802      	ldr	r2, [r0, #0]
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_I2C_MspInit+0x68>)
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f8:	b009      	add	sp, #36	; 0x24
 80016fa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fc:	2500      	movs	r5, #0
 80016fe:	9501      	str	r5, [sp, #4]
 8001700:	4c12      	ldr	r4, [pc, #72]	; (800174c <HAL_I2C_MspInit+0x6c>)
 8001702:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6323      	str	r3, [r4, #48]	; 0x30
 800170a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001718:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171a:	2312      	movs	r3, #18
 800171c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171e:	2301      	movs	r3, #1
 8001720:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001726:	2304      	movs	r3, #4
 8001728:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	a903      	add	r1, sp, #12
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x70>)
 800172e:	f7fe ff87 	bl	8000640 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001732:	9502      	str	r5, [sp, #8]
 8001734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173a:	6423      	str	r3, [r4, #64]	; 0x40
 800173c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800173e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	9b02      	ldr	r3, [sp, #8]
}
 8001746:	e7d7      	b.n	80016f8 <HAL_I2C_MspInit+0x18>
 8001748:	40005400 	.word	0x40005400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020400 	.word	0x40020400

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b530      	push	{r4, r5, lr}
 8001756:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001758:	2230      	movs	r2, #48	; 0x30
 800175a:	2100      	movs	r1, #0
 800175c:	a808      	add	r0, sp, #32
 800175e:	f000 fa07 	bl	8001b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001762:	2400      	movs	r4, #0
 8001764:	9403      	str	r4, [sp, #12]
 8001766:	9404      	str	r4, [sp, #16]
 8001768:	9405      	str	r4, [sp, #20]
 800176a:	9406      	str	r4, [sp, #24]
 800176c:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	9401      	str	r4, [sp, #4]
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <SystemClock_Config+0x90>)
 8001772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001784:	9402      	str	r4, [sp, #8]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <SystemClock_Config+0x94>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179a:	2301      	movs	r3, #1
 800179c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2502      	movs	r5, #2
 80017a6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ac:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017ae:	2319      	movs	r3, #25
 80017b0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017b6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ba:	2304      	movs	r3, #4
 80017bc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017be:	a808      	add	r0, sp, #32
 80017c0:	f7ff fb30 	bl	8000e24 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c8:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ca:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d6:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d8:	2105      	movs	r1, #5
 80017da:	a803      	add	r0, sp, #12
 80017dc:	f7ff fd6e 	bl	80012bc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80017e0:	b015      	add	sp, #84	; 0x54
 80017e2:	bd30      	pop	{r4, r5, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000

080017ec <main>:
{
 80017ec:	b508      	push	{r3, lr}
  HAL_Init();
 80017ee:	f7fe fe8b 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 80017f2:	f7ff ffaf 	bl	8001754 <SystemClock_Config>
  MX_GPIO_Init();
 80017f6:	f7ff fef5 	bl	80015e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017fa:	f7ff ff53 	bl	80016a4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80017fe:	f000 f917 	bl	8001a30 <MX_USART6_UART_Init>
  oled_Init();
 8001802:	f000 f85d 	bl	80018c0 <oled_Init>
	  HAL_Delay( 500 );
 8001806:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180a:	f7fe fea9 	bl	8000560 <HAL_Delay>
	  HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_15 );
 800180e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001812:	4802      	ldr	r0, [pc, #8]	; (800181c <main+0x30>)
 8001814:	f7ff f804 	bl	8000820 <HAL_GPIO_TogglePin>
  while (1)
 8001818:	e7f5      	b.n	8001806 <main+0x1a>
 800181a:	bf00      	nop
 800181c:	40020c00 	.word	0x40020c00

08001820 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001820:	4770      	bx	lr
	...

08001824 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8001824:	b500      	push	{lr}
 8001826:	b087      	sub	sp, #28
 8001828:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 800182c:	230a      	movs	r3, #10
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f10d 0217 	add.w	r2, sp, #23
 8001838:	9200      	str	r2, [sp, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	2178      	movs	r1, #120	; 0x78
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <oled_WriteCommand+0x28>)
 8001840:	f7ff fa3e 	bl	8000cc0 <HAL_I2C_Mem_Write>
}
 8001844:	b007      	add	sp, #28
 8001846:	f85d fb04 	ldr.w	pc, [sp], #4
 800184a:	bf00      	nop
 800184c:	20000434 	.word	0x20000434

08001850 <oled_Fill>:
}

void oled_Fill(OLED_COLOR color) {
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8001850:	2300      	movs	r3, #0
 8001852:	e003      	b.n	800185c <oled_Fill+0xc>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001854:	21ff      	movs	r1, #255	; 0xff
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <oled_Fill+0x1c>)
 8001858:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800185a:	3301      	adds	r3, #1
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	d203      	bcs.n	800186a <oled_Fill+0x1a>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001862:	2800      	cmp	r0, #0
 8001864:	d1f6      	bne.n	8001854 <oled_Fill+0x4>
 8001866:	4601      	mov	r1, r0
 8001868:	e7f5      	b.n	8001856 <oled_Fill+0x6>
	}
}
 800186a:	4770      	bx	lr
 800186c:	20000028 	.word	0x20000028

08001870 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8001870:	b510      	push	{r4, lr}
 8001872:	b084      	sub	sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001874:	2400      	movs	r4, #0
 8001876:	e01a      	b.n	80018ae <oled_UpdateScreen+0x3e>
		oled_WriteCommand(0xB0 + i);
 8001878:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 800187c:	b2c0      	uxtb	r0, r0
 800187e:	f7ff ffd1 	bl	8001824 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff ffce 	bl	8001824 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 8001888:	2010      	movs	r0, #16
 800188a:	f7ff ffcb 	bl	8001824 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 800188e:	2364      	movs	r3, #100	; 0x64
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <oled_UpdateScreen+0x48>)
 8001898:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	2240      	movs	r2, #64	; 0x40
 80018a2:	2178      	movs	r1, #120	; 0x78
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <oled_UpdateScreen+0x4c>)
 80018a6:	f7ff fa0b 	bl	8000cc0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80018aa:	3401      	adds	r4, #1
 80018ac:	b2e4      	uxtb	r4, r4
 80018ae:	2c07      	cmp	r4, #7
 80018b0:	d9e2      	bls.n	8001878 <oled_UpdateScreen+0x8>
	}
}
 80018b2:	b004      	add	sp, #16
 80018b4:	bd10      	pop	{r4, pc}
 80018b6:	bf00      	nop
 80018b8:	20000028 	.word	0x20000028
 80018bc:	20000434 	.word	0x20000434

080018c0 <oled_Init>:
uint8_t oled_Init(void) {
 80018c0:	b508      	push	{r3, lr}
	HAL_Delay(100);
 80018c2:	2064      	movs	r0, #100	; 0x64
 80018c4:	f7fe fe4c 	bl	8000560 <HAL_Delay>
	oled_WriteCommand(0xAE);
 80018c8:	20ae      	movs	r0, #174	; 0xae
 80018ca:	f7ff ffab 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80018ce:	2020      	movs	r0, #32
 80018d0:	f7ff ffa8 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80018d4:	2010      	movs	r0, #16
 80018d6:	f7ff ffa5 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 80018da:	20b0      	movs	r0, #176	; 0xb0
 80018dc:	f7ff ffa2 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 80018e0:	20c8      	movs	r0, #200	; 0xc8
 80018e2:	f7ff ff9f 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff ff9c 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80018ec:	2010      	movs	r0, #16
 80018ee:	f7ff ff99 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 80018f2:	2040      	movs	r0, #64	; 0x40
 80018f4:	f7ff ff96 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 80018f8:	2081      	movs	r0, #129	; 0x81
 80018fa:	f7ff ff93 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 80018fe:	20ff      	movs	r0, #255	; 0xff
 8001900:	f7ff ff90 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 8001904:	20a1      	movs	r0, #161	; 0xa1
 8001906:	f7ff ff8d 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 800190a:	20a6      	movs	r0, #166	; 0xa6
 800190c:	f7ff ff8a 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8001910:	20a8      	movs	r0, #168	; 0xa8
 8001912:	f7ff ff87 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8001916:	203f      	movs	r0, #63	; 0x3f
 8001918:	f7ff ff84 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 800191c:	20a4      	movs	r0, #164	; 0xa4
 800191e:	f7ff ff81 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8001922:	20d3      	movs	r0, #211	; 0xd3
 8001924:	f7ff ff7e 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff ff7b 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 800192e:	20d5      	movs	r0, #213	; 0xd5
 8001930:	f7ff ff78 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 8001934:	20f0      	movs	r0, #240	; 0xf0
 8001936:	f7ff ff75 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 800193a:	20d9      	movs	r0, #217	; 0xd9
 800193c:	f7ff ff72 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8001940:	2022      	movs	r0, #34	; 0x22
 8001942:	f7ff ff6f 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8001946:	20da      	movs	r0, #218	; 0xda
 8001948:	f7ff ff6c 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 800194c:	2012      	movs	r0, #18
 800194e:	f7ff ff69 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 8001952:	20db      	movs	r0, #219	; 0xdb
 8001954:	f7ff ff66 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8001958:	2020      	movs	r0, #32
 800195a:	f7ff ff63 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 800195e:	208d      	movs	r0, #141	; 0x8d
 8001960:	f7ff ff60 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 8001964:	2014      	movs	r0, #20
 8001966:	f7ff ff5d 	bl	8001824 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 800196a:	20af      	movs	r0, #175	; 0xaf
 800196c:	f7ff ff5a 	bl	8001824 <oled_WriteCommand>
	oled_Fill(Black);
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff ff6d 	bl	8001850 <oled_Fill>
	oled_UpdateScreen();
 8001976:	f7ff ff7b 	bl	8001870 <oled_UpdateScreen>
	OLED.CurrentX = 0;
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <oled_Init+0xd0>)
 800197c:	2200      	movs	r2, #0
 800197e:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	OLED.CurrentY = 0;
 8001982:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	OLED.Initialized = 1;
 8001986:	2001      	movs	r0, #1
 8001988:	f883 0405 	strb.w	r0, [r3, #1029]	; 0x405
}
 800198c:	bd08      	pop	{r3, pc}
 800198e:	bf00      	nop
 8001990:	20000028 	.word	0x20000028

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2100      	movs	r1, #0
 8001998:	9100      	str	r1, [sp, #0]
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_MspInit+0x34>)
 800199c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800199e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44
 80019a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019aa:	9200      	str	r2, [sp, #0]
 80019ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	9101      	str	r1, [sp, #4]
 80019b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	b002      	add	sp, #8
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler>

080019d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler>

080019d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler>

080019d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler>

080019d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019de:	f7fe fdad 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e2:	bd08      	pop	{r3, pc}

080019e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e4:	490f      	ldr	r1, [pc, #60]	; (8001a24 <SystemInit+0x40>)
 80019e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <SystemInit+0x44>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019fc:	2000      	movs	r0, #0
 80019fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <SystemInit+0x48>)
 8001a0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a16:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a18:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a1e:	608b      	str	r3, [r1, #8]
#endif
}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	24003010 	.word	0x24003010

08001a30 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001a30:	b508      	push	{r3, lr}
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a32:	480a      	ldr	r0, [pc, #40]	; (8001a5c <MX_USART6_UART_Init+0x2c>)
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <MX_USART6_UART_Init+0x30>)
 8001a36:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8001a38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a3c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a42:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a44:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a46:	220c      	movs	r2, #12
 8001a48:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a4e:	f7ff fd99 	bl	8001584 <HAL_UART_Init>
 8001a52:	b900      	cbnz	r0, 8001a56 <MX_USART6_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a54:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a56:	f7ff fee3 	bl	8001820 <Error_Handler>
}
 8001a5a:	e7fb      	b.n	8001a54 <MX_USART6_UART_Init+0x24>
 8001a5c:	20000488 	.word	0x20000488
 8001a60:	40011400 	.word	0x40011400

08001a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a64:	b500      	push	{lr}
 8001a66:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9303      	str	r3, [sp, #12]
 8001a6c:	9304      	str	r3, [sp, #16]
 8001a6e:	9305      	str	r3, [sp, #20]
 8001a70:	9306      	str	r3, [sp, #24]
 8001a72:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 8001a74:	6802      	ldr	r2, [r0, #0]
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_UART_MspInit+0x68>)
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d002      	beq.n	8001a82 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001a7c:	b009      	add	sp, #36	; 0x24
 8001a7e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a82:	2200      	movs	r2, #0
 8001a84:	9201      	str	r2, [sp, #4]
 8001a86:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8001a8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a8c:	f041 0120 	orr.w	r1, r1, #32
 8001a90:	6459      	str	r1, [r3, #68]	; 0x44
 8001a92:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a94:	f001 0120 	and.w	r1, r1, #32
 8001a98:	9101      	str	r1, [sp, #4]
 8001a9a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9c:	9202      	str	r2, [sp, #8]
 8001a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aa0:	f041 0104 	orr.w	r1, r1, #4
 8001aa4:	6319      	str	r1, [r3, #48]	; 0x30
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	a903      	add	r1, sp, #12
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <HAL_UART_MspInit+0x6c>)
 8001ac6:	f7fe fdbb 	bl	8000640 <HAL_GPIO_Init>
}
 8001aca:	e7d7      	b.n	8001a7c <HAL_UART_MspInit+0x18>
 8001acc:	40011400 	.word	0x40011400
 8001ad0:	40020800 	.word	0x40020800

08001ad4 <Reset_Handler>:
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0x14>
 8001ad8:	2100      	movs	r1, #0
 8001ada:	e003      	b.n	8001ae4 <LoopCopyDataInit>

08001adc <CopyDataInit>:
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x18>)
 8001ade:	585b      	ldr	r3, [r3, r1]
 8001ae0:	5043      	str	r3, [r0, r1]
 8001ae2:	3104      	adds	r1, #4

08001ae4 <LoopCopyDataInit>:
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <LoopFillZerobss+0x1c>)
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <LoopFillZerobss+0x20>)
 8001ae8:	1842      	adds	r2, r0, r1
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3f6      	bcc.n	8001adc <CopyDataInit>
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopFillZerobss+0x24>)
 8001af0:	e002      	b.n	8001af8 <LoopFillZerobss>

08001af2 <FillZerobss>:
 8001af2:	2300      	movs	r3, #0
 8001af4:	f842 3b04 	str.w	r3, [r2], #4

08001af8 <LoopFillZerobss>:
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <LoopFillZerobss+0x28>)
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3f9      	bcc.n	8001af2 <FillZerobss>
 8001afe:	f7ff ff71 	bl	80019e4 <SystemInit>
 8001b02:	f000 f811 	bl	8001b28 <__libc_init_array>
 8001b06:	f7ff fe71 	bl	80017ec <main>
 8001b0a:	4770      	bx	lr
 8001b0c:	20020000 	.word	0x20020000
 8001b10:	08001bc0 	.word	0x08001bc0
 8001b14:	20000000 	.word	0x20000000
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	200004cc 	.word	0x200004cc

08001b24 <ADC_IRQHandler>:
 8001b24:	e7fe      	b.n	8001b24 <ADC_IRQHandler>
	...

08001b28 <__libc_init_array>:
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	4d0d      	ldr	r5, [pc, #52]	; (8001b60 <__libc_init_array+0x38>)
 8001b2c:	4c0d      	ldr	r4, [pc, #52]	; (8001b64 <__libc_init_array+0x3c>)
 8001b2e:	1b64      	subs	r4, r4, r5
 8001b30:	10a4      	asrs	r4, r4, #2
 8001b32:	2600      	movs	r6, #0
 8001b34:	42a6      	cmp	r6, r4
 8001b36:	d109      	bne.n	8001b4c <__libc_init_array+0x24>
 8001b38:	4d0b      	ldr	r5, [pc, #44]	; (8001b68 <__libc_init_array+0x40>)
 8001b3a:	4c0c      	ldr	r4, [pc, #48]	; (8001b6c <__libc_init_array+0x44>)
 8001b3c:	f000 f820 	bl	8001b80 <_init>
 8001b40:	1b64      	subs	r4, r4, r5
 8001b42:	10a4      	asrs	r4, r4, #2
 8001b44:	2600      	movs	r6, #0
 8001b46:	42a6      	cmp	r6, r4
 8001b48:	d105      	bne.n	8001b56 <__libc_init_array+0x2e>
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
 8001b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b50:	4798      	blx	r3
 8001b52:	3601      	adds	r6, #1
 8001b54:	e7ee      	b.n	8001b34 <__libc_init_array+0xc>
 8001b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b5a:	4798      	blx	r3
 8001b5c:	3601      	adds	r6, #1
 8001b5e:	e7f2      	b.n	8001b46 <__libc_init_array+0x1e>
 8001b60:	08001bb8 	.word	0x08001bb8
 8001b64:	08001bb8 	.word	0x08001bb8
 8001b68:	08001bb8 	.word	0x08001bb8
 8001b6c:	08001bbc 	.word	0x08001bbc

08001b70 <memset>:
 8001b70:	4402      	add	r2, r0
 8001b72:	4603      	mov	r3, r0
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d100      	bne.n	8001b7a <memset+0xa>
 8001b78:	4770      	bx	lr
 8001b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b7e:	e7f9      	b.n	8001b74 <memset+0x4>

08001b80 <_init>:
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	bf00      	nop
 8001b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b86:	bc08      	pop	{r3}
 8001b88:	469e      	mov	lr, r3
 8001b8a:	4770      	bx	lr

08001b8c <_fini>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	bf00      	nop
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc08      	pop	{r3}
 8001b94:	469e      	mov	lr, r3
 8001b96:	4770      	bx	lr
